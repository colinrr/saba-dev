function [V] = thermOpticFlow(vidFile,vidParams,FarnebackParams,plotflag)
% INPUT:      vidFile = path to video generated by thermCube2gradient.m
%             vidPar  = struct containing meta data for vidFile, or path
%                       to vidPar .mat file 
%             FarnebackParams = struct of optical flow name value pairs
%                               -->see 'help opticalFlowFarneback'
%
%             plotflag - T/F
% Read a video, do optical flow analysis
%
% C Rowell Aug 2019
% - Probably want to get opticFlow parameters as struct input

fprintf('\n========= Thermal Optical Flow Analysis =========\n')

%% Check input
narginchk(2,4)
if nargin<4
    plotflag=false;
end
if nargin<3
    FarnebackParams = [];
end    

% If input vidParams is file path, then load vidParams struct. Otherwise,
% input should be the struct itself
if ischar(vidParams)
    vidParamFile = vidParams;
    load(vidParamFile)
elseif isstruct(vidParams)
    vidParamFile = [];
elseif ~isstruct(vidParams)
    error('Variable "vidParams" must be a struct or file path to struct') 
end
%% Optical flow setup
% vidFile = '~/Kahuna/data/sabancaya_5_2018/image_exports/24A/vids/thermal-gradient.avi';
% vidFile = '~/Kahuna/data/sabancaya_5_2018/image_exports/24A/vids/thermal.avi';

V.dataCube = vidParams.dataCube;

% Farneback default parameters
V.NumPyramidLevels  = 3;    % 3 default
V.PyramidScale      = 0.5;  % 0.5 default
V.NumIterations     = 3;    % 3 default
V.NeighborhoodSize  = 5;    % 5 default, Neighbourhood size for Farneback method
V.FilterSize        = 15;   % 15 default

if ~isempty(FarnebackParams)
    assert(isstruct(FarnebackParams),'Input variable FarnebackParams must be a struct with fields corresponding to opticalFlowFarneback name-value pairs')
    fnames = fieldnames(FarnebackParams);
    dfnames = fieldnames(V);
    for fn=1:length(fnames)
        fname = fnames{fn};
        if any(strcmp(fname,dfnames))
            V.(fname) = FarnebackParams.(fname);
        end
    end
end

vidReader = VideoReader(vidFile); %,'CurrentTime',11);

% opticFlow = opticalFlowHS; flowtype='opticFlowHS';
% opticFlow = opticalFlowLK;
% opticFlow = opticalFlowLKDoG;
opticFlow = opticalFlowFarneback('NeighborhoodSize',V.NeighborhoodSize,'NumPyramidLevels',V.NumPyramidLevels,...
    'FilterSize',V.FilterSize,'PyramidScale',V.PyramidScale, 'NumIterations',V.NumIterations ); flowtype = 'opticFlowFB';

% vidParams.imsz = [788 980];

t = vidParams.t;
dt = diff(t);
N  = numel(vidParams.idx);
%% Do the thing

% Vel data cube
V.Vx = single(zeros([vidReader.Height vidReader.Width N]));
V.Vz = V.Vx;

if ~isempty(vidParamFile)
    [vpath,~,~] = fileparts(vidParams.dataCube);
    vfile = fullfile(vpath, sprintf('%s_%s_n%i_nPyr%i_sPyr%s_nIter%i_nSz%i_fSz%i', ...
        flowtype,datestr(now,'YY-mm-dd'), size(V.Vx,3), V.NumPyramidLevels, ...
        strrep(sprintf('%.2f',V.PyramidScale),'.','-'), V.NumIterations, V.NeighborhoodSize, V.FilterSize) );
    fprintf('Optic flow output file:\n\t%s\n',vfile)
end

textprogressbar(sprintf('Processing %i frames...', N))

fCount = 0;
while hasFrame(vidReader)
    fCount = fCount + 1;
    frameGray = readFrame(vidReader);
%     frameGray = rgb2gray(frameRGB);

    flow = estimateFlow(opticFlow,frameGray);
    
    V.Vx(:,:,fCount) = flow.Vx;
    V.Vz(:,:,fCount) = -flow.Vy; % Negative to convert from image reference coords to data

%     img = computeColor(flow.Vx,flow.Vy);
    
    textprogressbar(fCount/N*100)
    
    if plotflag
        imshow(frameGray)
        hold on
        plot(flow,'DecimationFactor',[5 5],'ScaleFactor',10)
        pause(0.05)
    end

end

% Conversion to velocity, flipud to revert to data reference frame
V.Vx = flipud(V.Vx(:,:,2:end)*vidParams.dx./reshape(dt, [1 1 N-1]));
V.Vz = flipud(V.Vz(:,:,2:end)*vidParams.dz./reshape(dt, [1 1 N-1])); 

% V.Vmax = max( sqrt(V.Vx(:).^2 + V.Vz(:).^2) ); % Max absolute velocity
textprogressbar('--> Done!')

if ~isempty(vidParamFile)
    disp('Writing output to disk...')
%     [vpath,~,~] = fileparts(vidParams.dataCube);
%     vfile = fullfile(vpath, sprintf('velocimetry_%s_n%i_nSz%i_nPyr%i_fSz%i',datestr(now,'YYmmdd'),...
%         size(V.Vx,3), V.NeighborhoodSize, V.NumPyramidLevels, V.FilterSize) );
%     ofile = sprintf('thermVelocity_%s_n%i', datestr(now,'YYYY-mm-dd'),N);
    save(vfile,'V','vidParams','-v7.3')
%     save(vidParams.dataCube,'Vx','Vz','-append')
end


%% Make a legend
% xl = repmat(linspace(-1,1,81),[81 1]);
% yl = xl';
% 
% leg = computeColor(xl,yl);
% 
% figure
% imagesc(xl(1,:),yl(:,1),leg)
% 
% % Plot
% figure('position',[500 200 600 400])
% for ii=2:N
%     img = computeColor(Vx(:,:,ii)./Vmaxnorm,Vz(:,:,ii)./Vmaxnorm);
%     
%     imagesc(img)
%     caxis([-1 1])
% %     imshow(frameGray)
% %     colormap(redblue(150))
%     hold on
% %     plot(flow,'DecimationFactor',[5 5],'ScaleFactor',10)
%     hold off
%     pause(0.1)
% end


end